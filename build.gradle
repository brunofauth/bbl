buildscript {
    ext {
        kotlin_version = '1.7.10'
        lucene_version = '9.4.0'
        tinlylog_version = '2.5.0'
        junit_version = '5.9.0'
        testcontainers_version = '1.17.5'
    }
}

plugins {
    id 'org.jetbrains.kotlin.jvm' version "$kotlin_version"
    id 'org.jetbrains.kotlin.plugin.serialization' version "$kotlin_version"
    id 'application'
    id "org.beryx.jlink" version "2.25.0"
    id "org.javamodularity.moduleplugin" version "1.8.12"
}

group = 'org.gnit.bible'
version = '1.2'

repositories {
    mavenCentral()
}

dependencies {
    implementation "com.github.ajalt.clikt:clikt:3.5.0"
    implementation "org.jetbrains.kotlinx:kotlinx-serialization-json:1.4.0"
    implementation 'org.slf4j:slf4j-api:2.0.3'
    implementation "org.tinylog:slf4j-tinylog:$tinlylog_version"
    implementation "org.tinylog:tinylog-impl:$tinlylog_version"
    implementation 'net.java.dev.jna:jna:5.12.1'

    //search
    implementation 'com.google.jimfs:jimfs:1.2'
    implementation "org.apache.lucene:lucene-queryparser:$lucene_version"
    implementation "org.apache.lucene:lucene-analysis-common:$lucene_version"
    implementation "org.apache.lucene:lucene-analysis-smartcn:$lucene_version"
    implementation "org.apache.lucene:lucene-analysis-kuromoji:$lucene_version"
    implementation "org.apache.lucene:lucene-analysis-nori:$lucene_version"

    //test
    implementation 'org.jetbrains.kotlin:kotlin-test'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testImplementation "org.junit.jupiter:junit-jupiter-engine:$junit_version"
    testImplementation "org.testcontainers:testcontainers:$testcontainers_version"
    testImplementation "org.testcontainers:junit-jupiter:$testcontainers_version"
}

test {
    useJUnitPlatform()
}

compileKotlin {
    kotlinOptions.jvmTarget = '18'
}

compileTestKotlin {
    kotlinOptions.jvmTarget = '18'
}

sourceSets {
    main {
        resources {
            srcDirs "src/main/resources"
        }
    }
}

processResources {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE
}

compileKotlin.destinationDirectory = compileJava.destinationDirectory

application {
    mainClassName = 'org.gnit.bible.MainKt'
    mainModule = 'org.gnit.bible'
}

jar {
    duplicatesStrategy = DuplicatesStrategy.EXCLUDE

    from('src/main/resources') {
        include 'data/**/*.txt'
    }

    exclude 'tinylog-dev.properties'
}

jlink {
    mergedModule {
        additive = true
        forceMerge "kotlin"
    }

    def resourceDir = "src/main/resources/installer"

    launcher {
        name = 'bbl'
    }

    jpackage {
        installerName = 'bbl'

        appVersion = "$version"
        installerOptions += [
                '--copyright', 'Copyright Â© 2022, Joel H. Ide, gnit.org',
                '--vendor', 'Gospel and Information Technology',
                '--description', 'bbl, command line bible reader'
        ]

        //https://wix-tutorial-ja.github.io/ch01/index.html
        if (org.gradle.internal.os.OperatingSystem.current().windows) {
            icon = "$resourceDir/bbl.ico"
            installerOptions += ['--win-per-user-install',
                                 '--win-dir-chooser',
                                 '--win-menu',
                                 '--win-shortcut',
                                 '--resource-dir', (resourceDir + "/windows")]

            imageOptions += ['--win-console']

            installerType = 'msi'

            targetPlatform("windows-x64") {
                //jdkHome = "C:\\Program Files\\OpenJDK\\jdk-16"
                jdkHome = "$System.env.JAVA_HOME"
            }
        }

        //https://docs.oracle.com/javase/jp/14/docs/specs/man/jpackage.html
        //https://developer.apple.com/jp/developer-id/
        //https://stackoverflow.com/questions/44081611/how-can-i-change-the-icon-used-by-javapackager-for-pkg-installers
        if (org.gradle.internal.os.OperatingSystem.current().macOsX) {
            icon = "$resourceDir/bbl.icns"
            installerType = 'pkg'
            installerOptions += [/*'--mac-sign', //TODO input after enrolling developer program
                                 '--mac-signing-key-user-name', 'x',*/
                                 '--resource-dir', (resourceDir + "/macos")]
        }

        //https://docs.oracle.com/en/java/javase/16/jpackage/override-jpackage-resources.html#GUID-405708DC-0243-49FC-84D9-B2A7F0A011A9
        //https://docs.oracle.com/javase/jp/14/jpackage/override-jpackage-resources.html#GUID-1B718F8B-B68D-4D46-B1DB-003D7729AAB6
        //https://www.debian.org/doc/manuals/debian-faq/pkg-basics.ja.html#maintscripts
        //https://www.debian.org/doc/debian-policy/ch-maintainerscripts.html
        if (org.gradle.internal.os.OperatingSystem.current().linux) {
            icon = "$resourceDir/bbl.png"
            installerOptions += ['--install-dir', '/usr/local/lib',
                                 '--resource-dir', (resourceDir + "/linux"),
                                 '--linux-deb-maintainer', 'nehemiaharchive@gmail.com']

            installerType = 'deb'

            targetPlatform("linux-x64") {
                jdkHome = "/usr/lib/jvm/java-18-openjdk-amd64"
            }
        }

    }
}
